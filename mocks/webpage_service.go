// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mirai-box/mirai-box/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// WebPageService is an autogenerated mock type for the WebPageService type
type WebPageService struct {
	mock.Mock
}

// CreateWebPage provides a mock function with given fields: ctx, webPage
func (_m *WebPageService) CreateWebPage(ctx context.Context, webPage *model.WebPage) (*model.WebPage, error) {
	ret := _m.Called(ctx, webPage)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebPage")
	}

	var r0 *model.WebPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WebPage) (*model.WebPage, error)); ok {
		return rf(ctx, webPage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.WebPage) *model.WebPage); ok {
		r0 = rf(ctx, webPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WebPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.WebPage) error); ok {
		r1 = rf(ctx, webPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebPage provides a mock function with given fields: ctx, id
func (_m *WebPageService) DeleteWebPage(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebPage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWebPage provides a mock function with given fields: ctx, id
func (_m *WebPageService) GetWebPage(ctx context.Context, id string) (*model.WebPage, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWebPage")
	}

	var r0 *model.WebPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.WebPage, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.WebPage); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WebPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserWebPages provides a mock function with given fields: ctx, userID
func (_m *WebPageService) ListUserWebPages(ctx context.Context, userID string) ([]model.WebPage, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListUserWebPages")
	}

	var r0 []model.WebPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.WebPage, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.WebPage); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WebPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebPages provides a mock function with given fields: ctx
func (_m *WebPageService) ListWebPages(ctx context.Context) ([]model.WebPage, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListWebPages")
	}

	var r0 []model.WebPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.WebPage, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.WebPage); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WebPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebPagesByType provides a mock function with given fields: ctx, pageType
func (_m *WebPageService) ListWebPagesByType(ctx context.Context, pageType string) ([]model.WebPage, error) {
	ret := _m.Called(ctx, pageType)

	if len(ret) == 0 {
		panic("no return value specified for ListWebPagesByType")
	}

	var r0 []model.WebPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.WebPage, error)); ok {
		return rf(ctx, pageType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.WebPage); ok {
		r0 = rf(ctx, pageType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WebPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pageType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebPage provides a mock function with given fields: ctx, webPage
func (_m *WebPageService) UpdateWebPage(ctx context.Context, webPage *model.WebPage) (*model.WebPage, error) {
	ret := _m.Called(ctx, webPage)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebPage")
	}

	var r0 *model.WebPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WebPage) (*model.WebPage, error)); ok {
		return rf(ctx, webPage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.WebPage) *model.WebPage); ok {
		r0 = rf(ctx, webPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WebPage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.WebPage) error); ok {
		r1 = rf(ctx, webPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWebPageService creates a new instance of WebPageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebPageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebPageService {
	mock := &WebPageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

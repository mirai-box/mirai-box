// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	fs "io/fs"

	io "io"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mirai-box/mirai-box/internal/model"
)

// FileStorageService is an autogenerated mock type for the FileStorageService type
type FileStorageService struct {
	mock.Mock
}

// FindStashByUserID provides a mock function with given fields: ctx, userID
func (_m *FileStorageService) FindStashByUserID(ctx context.Context, userID string) (*model.Stash, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindStashByUserID")
	}

	var r0 *model.Stash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Stash, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Stash); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Stash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevisionFile provides a mock function with given fields: ctx, userID, artProjectID, version
func (_m *FileStorageService) GetRevisionFile(ctx context.Context, userID string, artProjectID string, version int) (io.ReadCloser, error) {
	ret := _m.Called(ctx, userID, artProjectID, version)

	if len(ret) == 0 {
		panic("no return value specified for GetRevisionFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) (io.ReadCloser, error)); ok {
		return rf(ctx, userID, artProjectID, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) io.ReadCloser); ok {
		r0 = rf(ctx, userID, artProjectID, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, userID, artProjectID, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRevisionFile provides a mock function with given fields: ctx, fileData, userID, artProjectID, version
func (_m *FileStorageService) SaveRevisionFile(ctx context.Context, fileData io.Reader, userID string, artProjectID string, version int) (string, fs.FileInfo, error) {
	ret := _m.Called(ctx, fileData, userID, artProjectID, version)

	if len(ret) == 0 {
		panic("no return value specified for SaveRevisionFile")
	}

	var r0 string
	var r1 fs.FileInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string, string, int) (string, fs.FileInfo, error)); ok {
		return rf(ctx, fileData, userID, artProjectID, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string, string, int) string); ok {
		r0 = rf(ctx, fileData, userID, artProjectID, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, string, string, int) fs.FileInfo); ok {
		r1 = rf(ctx, fileData, userID, artProjectID, version)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, io.Reader, string, string, int) error); ok {
		r2 = rf(ctx, fileData, userID, artProjectID, version)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewFileStorageService creates a new instance of FileStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStorageService {
	mock := &FileStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

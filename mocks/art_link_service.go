// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mirai-box/mirai-box/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ArtLinkService is an autogenerated mock type for the ArtLinkService type
type ArtLinkService struct {
	mock.Mock
}

// CreateArtLink provides a mock function with given fields: ctx, revisionID, duration, oneTime
func (_m *ArtLinkService) CreateArtLink(ctx context.Context, revisionID uuid.UUID, duration time.Duration, oneTime bool) (string, error) {
	ret := _m.Called(ctx, revisionID, duration, oneTime)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Duration, bool) (string, error)); ok {
		return rf(ctx, revisionID, duration, oneTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Duration, bool) string); ok {
		r0 = rf(ctx, revisionID, duration, oneTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Duration, bool) error); ok {
		r1 = rf(ctx, revisionID, duration, oneTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtLinkByToken provides a mock function with given fields: ctx, token
func (_m *ArtLinkService) GetArtLinkByToken(ctx context.Context, token string) (*model.ArtLink, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetArtLinkByToken")
	}

	var r0 *model.ArtLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.ArtLink, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ArtLink); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ArtLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArtLink provides a mock function with given fields: ctx, artLink
func (_m *ArtLinkService) UpdateArtLink(ctx context.Context, artLink *model.ArtLink) error {
	ret := _m.Called(ctx, artLink)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArtLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ArtLink) error); ok {
		r0 = rf(ctx, artLink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewArtLinkService creates a new instance of ArtLinkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtLinkService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtLinkService {
	mock := &ArtLinkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
